// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/

export const commands = {
  async setTheme(theme: AppTheme): Promise<void> {
    await TAURI_INVOKE("set_theme", { theme });
  },
  async resizeAudioPanel(width: number, height: number): Promise<null> {
    return await TAURI_INVOKE("resize_audio_panel", { width, height });
  },
  async requestPermission(permission: OSPermission): Promise<void> {
    await TAURI_INVOKE("request_permission", { permission });
  },
  async checkOsPermissions(initialCheck: boolean): Promise<OSPermissionsCheck> {
    return await TAURI_INVOKE("check_os_permissions", { initialCheck });
  },
  async openPermissionSettings(permission: OSPermission): Promise<void> {
    await TAURI_INVOKE("open_permission_settings", { permission });
  },
  async setHotkey(action: HotkeyAction, hotkey: Hotkey | null): Promise<null> {
    return await TAURI_INVOKE("set_hotkey", { action, hotkey });
  },
  async startDictating(mode: DictatingMode): Promise<null> {
    return await TAURI_INVOKE("start_dictating", { mode });
  },
  async cancelDictating(): Promise<null> {
    return await TAURI_INVOKE("cancel_dictating");
  },
  async stopDictating(triggeredByUi: boolean): Promise<TranscriptionResult> {
    return await TAURI_INVOKE("stop_dictating", { triggeredByUi });
  },
  /**
   * 显示反馈消息
   *
   * 在 Main 窗口上方或下方显示反馈信息，3 秒后自动关闭
   */
  async showFeedback(
    message: string,
    feedbackType: FeedbackType,
    offsetX: number | null,
  ): Promise<null> {
    return await TAURI_INVOKE("show_feedback", {
      message,
      feedbackType,
      offsetX,
    });
  },
  /**
   * 隐藏反馈窗口
   */
  async hideFeedback(): Promise<null> {
    return await TAURI_INVOKE("hide_feedback");
  },
  /**
   * 获取开机自启动状态
   */
  async getAutostartEnabled(): Promise<boolean> {
    return await TAURI_INVOKE("get_autostart_enabled");
  },
  /**
   * 设置开机自启动
   */
  async setAutostartEnabled(enabled: boolean): Promise<null> {
    return await TAURI_INVOKE("set_autostart_enabled", { enabled });
  },
};

/** user-defined events **/

export const events = __makeEvents__<{
  audioFlowPanelPositionChanged: AudioFlowPanelPositionChanged;
  onEscapePress: OnEscapePress;
  showFeedback: ShowFeedback;
}>({
  audioFlowPanelPositionChanged: "audio-flow-panel-position-changed",
  onEscapePress: "on-escape-press",
  showFeedback: "show-feedback",
});

/** user-defined constants **/

/** user-defined types **/

export type AppTheme = "system" | "light" | "dark";
export type AudioFlowPanelPosition = "bottomCenter" | "topCenter";
export type AudioFlowPanelPositionChanged = {
  position: AudioFlowPanelPosition;
};
export type AudioState =
  | { type: "idle" }
  | { type: "dictating"; mode: DictatingMode }
  | { type: "transcribing" };
export type DictatingMode = "normal" | "hotkey";
export type FeedbackType = "tooltip" | "error" | "toast";
export type Hotkey = {
  code: string;
  meta: boolean;
  ctrl: boolean;
  alt: boolean;
  shift: boolean;
};
export type HotkeyAction = "startDictating" | "other";
export type HotkeysStore = {
  hotkeys: Partial<{ [key in HotkeyAction]: Hotkey }>;
};
export type OSPermission = "microphone" | "accessibility";
export type OSPermissionStatus = "notNeeded" | "empty" | "granted" | "denied";
export type OSPermissionsCheck = {
  microphone: OSPermissionStatus;
  accessibility: OSPermissionStatus;
};
export type OnEscapePress = null;
export type SettingsStore = {
  theme?: AppTheme;
  audioFlowPanelPosition?: AudioFlowPanelPosition;
  asrAppId?: string | null;
  asrAccessToken?: string | null;
  llmApiKey?: string | null;
  llmSystemPrompt?: string | null;
  autostartEnabled?: boolean;
};
export type ShowFeedback = { message: string; type: FeedbackType };
export type TranscriptionResult = {
  text: string;
  durationMs: number | null;
  utterances: TranscriptionUtterance[];
};
export type TranscriptionUtterance = {
  text: string;
  startTime: number;
  endTime: number;
};

/** tauri-specta globals **/

import { invoke as TAURI_INVOKE } from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
  listen: (
    cb: TAURI_API_EVENT.EventCallback<T>,
  ) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
  once: (
    cb: TAURI_API_EVENT.EventCallback<T>,
  ) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
  emit: null extends T
    ? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
    : (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
  | { status: "ok"; data: T }
  | { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
  mappings: Record<keyof T, string>,
) {
  return new Proxy(
    {} as unknown as {
      [K in keyof T]: __EventObj__<T[K]> & {
        (handle: __WebviewWindow__): __EventObj__<T[K]>;
      };
    },
    {
      get: (_, event) => {
        const name = mappings[event as keyof T];

        return new Proxy((() => {}) as any, {
          apply: (_, __, [window]: [__WebviewWindow__]) => ({
            listen: (arg: any) => window.listen(name, arg),
            once: (arg: any) => window.once(name, arg),
            emit: (arg: any) => window.emit(name, arg),
          }),
          get: (_, command: keyof __EventObj__<any>) => {
            switch (command) {
              case "listen":
                return (arg: any) => TAURI_API_EVENT.listen(name, arg);
              case "once":
                return (arg: any) => TAURI_API_EVENT.once(name, arg);
              case "emit":
                return (arg: any) => TAURI_API_EVENT.emit(name, arg);
            }
          },
        });
      },
    },
  );
}
